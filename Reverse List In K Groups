/**
 * Definition for singly-linked list.
 * class Node {
 * public:
 *     int data;
 *     Node *next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node *next) : data(x), next(next) {}
 * };
 */



Node* kReverse(Node* head, int k) {
    if(head==NULL){
        return NULL;
    }
    Node* temp = head;
    int i =0;
    while(temp!=NULL && i<k){
        temp = temp->next;
        i++;
    }
    if(i<k-1){
        return head;
    }

    Node* prev =NULL;
    Node* curr = head;
    Node* next = NULL;
    int count =0;

    while(curr!=NULL && count<k){
        next=curr->next;
        curr->next=prev;
        prev=curr;
        curr=next;
        count++;
    }
    if(next!=NULL){
        head->next = kReverse(next,k);
    }
    return prev;

};
